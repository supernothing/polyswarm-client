image: $REPO_URL/stage

services:
  - docker:dind

stages:
  - build
  - test
  - e2e
  - release
  - deployment

variables:
  DOCKER_HOST: tcp://localhost:2375/
  BASE_IMAGE_NAME: polyswarm-client

###############################################################
# Build Stage (jobs inside a stage run in parallel)
###############################################################

build-linux:
  stage: build
  tags:
    - kube
  script:
     # try to download a cache image
     - docker pull $REPO_URL/$BASE_IMAGE_NAME:latest || true
     # explicitly pull the latest version of the dependant image
     - docker pull python:3.6-stretch
     - docker build
       -f docker/Dockerfile
       -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
       -t $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG
       --cache-from=$REPO_URL/$BASE_IMAGE_NAME:latest
       .
     - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
     - docker push $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_REF_SLUG

build-windows:
  stage: build
  tags:
    - win-participants
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    - docker pull $REPO_URL/$BASE_IMAGE_NAME-windows:latest
    - docker build -t $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA -f docker/windows/Dockerfile --cache-from=$REPO_URL/$BASE_IMAGE_NAME-windows:latest .
    - docker push $REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA

###############################################################
# Test Stage
###############################################################


###############################################################
# End-to-end Stage
###############################################################

e2e:
  stage: e2e
  tags:
    - kube
  script:
    - pip install $END_TO_END_LIB@$CI_COMMIT_REF_NAME || pip install $END_TO_END_LIB
    - e2e init
    - e2e run

###############################################################
# Release Stage
###############################################################

release-latest-linux:
  stage: release
  tags:
    - kube
  script:
    # Gets the current image that was built in the CI for this commit
    - docker pull $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA $REPO_URL/$BASE_IMAGE_NAME:latest
    - docker tag $REPO_URL/$BASE_IMAGE_NAME:$CI_COMMIT_SHA polyswarm/$BASE_IMAGE_NAME:latest
    # Pushes to AWS
    - docker push $REPO_URL/$BASE_IMAGE_NAME:latest
    # Pushes to DockerHub
    - docker logout
    - docker login -u $CI_CUSTOM_DOCKER_HUB_USERNAME -p $CI_CUSTOM_DOCKER_HUB_PASSWORD
    - docker push polyswarm/$BASE_IMAGE_NAME:latest

release-latest-windows:
  stage: release
  tags:
    - win-participants
  only:
    - master
  script:
    - $env:DOCKER_HOST = ''
    - aws ecr get-login --no-include-email --region us-east-1 | Powershell
    # Gets the current image that was built in the CI for this commit
    - docker pull "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA"
    # Creates new tags for this image, one that should go to AWS and another to DockerHub with the tag "latest"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "$REPO_URL/$BASE_IMAGE_NAME-windows:latest"
    - docker tag "$REPO_URL/$BASE_IMAGE_NAME-windows:$CI_COMMIT_SHA" "polyswarm/$BASE_IMAGE_NAME-windows:latest"
    # Pushes to AWS
    - docker push "$REPO_URL/$BASE_IMAGE_NAME-windows:latest"
    # Pushes to DockerHub
    - docker logout
    - docker login -u "$CI_CUSTOM_DOCKER_HUB_USERNAME" -p "$CI_CUSTOM_DOCKER_HUB_PASSWORD"
    - docker push "polyswarm/$BASE_IMAGE_NAME-windows:latest"

###############################################################
# Deployment Stage
###############################################################

kick-after-complete1:
  stage: deployment
  trigger: externalci/microengine-ikarus

kick-after-complete2:
  stage: deployment
  trigger: externalci/microengine-trustlook

kick-after-complete3:
  stage: deployment
  trigger: externalci/microengine-drweb

kick-after-complete4:
  stage: deployment
  trigger: externalci/microengine-rising

kick-after-complete5:
  stage: deployment
  trigger: externalci/microengine-iris-h
kick-after-complete6:
  stage: deployment
  trigger: externalci/microengine-intezer-analyze

kick-after-complete7:
  stage: deployment
  trigger: externalci/microengine-zerocert

kick-after-complete8:
  stage: deployment
  trigger: externalci/microengine-virusdie
kick-after-complete9:
  stage: deployment
  trigger: externalci/microengine-cyradar

kick-after-complete10:
  stage: deployment
  trigger: externalci/microengine-nucleon

kick-after-complete11:
  stage: deployment
  trigger: externalci/microengine-spamhaus

kick-after-complete12:
  stage: deployment
  trigger: externalci/polyswarm-client-windows

kick-after-complete15:
  stage: deployment
  trigger: externalci/microengine-crowdstrike-falcon

kick-after-complete17:
  stage: deployment
  trigger: externalci/microengine-inscyt

kick-after-complete18:
  stage: deployment
  trigger: externalci/microengine-phishtank

kick-after-complete19:
  stage: deployment
  trigger: externalci/arbiter-hatchingtriage

kick-after-complete20:
  stage: deployment
  trigger: externalci/microengine-quttera

kick-after-complete21:
  stage: deployment
  trigger: externalci/microengine-concinnity

kick-after-complete22:
  stage: deployment
  trigger: externalci/microengine-venustech

kick-after-complete23:
  stage: deployment
  trigger: externalci/microengine-notmining

kick-after-complete24:
  stage: deployment
  trigger: externalci/microengine-urlhaus
